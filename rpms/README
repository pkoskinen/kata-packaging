Contents

I.      Overview
II.     Step 1: Build & installation preparations
III.    Step 2: Building and installation of solr
IV.     Step 3: Building and installation of mcfg
V.      Step 4: Building and installation of kata-ckan-dev
VI.     Step 5: Building kata-ckan-prod
VII.    Step 6: Installation of kata-ckan-prod
VII.    Administrative tasks

I. Overview

Kata building and installation comprises 3 packages on 2 (virtual) machines.
The (virtual) machines are called development (dev) and production (prod).
(Developers should read further down why 2 development machines might not be
enough for them.)

The most important steps at a glance are

Step 2: Build and install solr on development machine
Step 3: Build and install mcfg on development machine
Step 4: Build and install kata-ckan-dev package on development machine
Step 5: Build kata-ckan-prod on development machine
Step 6: Carry out final installation on production machine

Rationale:

CKAN installation gets code from from may different web sites and even
directly from version control repositories. Experience shows that even
within a couple of days such an installation might no longer
reproducible, because some upstream component has changed. In order to
achieve reproducible results we use 2 rpm-packages

1. ckan-kat-dev: This package does not contain the code but an
   automatic installation and setup mechanism. Installation will be
   done in an development environment. It is the goal that this
   installation is fully functional and as close as possible to the
   production environment. Repeated installation will no longer lead
   to the same results after upstream has made a change.

2. ckan-kat-prod: This package contains the full code. It will be captured
   in a development environment after ckan-kat-dev has been installed.
   Repeated installation of ckan-kat-prod will lead to the same result.

In an ideal world one development machine is enough for this process.
However, especially during development work repeated installation and
installation of a package might lead to leftovers with undesirable side
effects. (At the time of writing we have not even tried to code correct
un-installation scriptlets and even after we have there can always be bugs.) So
developers might want to use more than 1 development machine and/or snapshots
in different states to avoid repeatedly installing the same unchanged packages
after resetting a development machine. I use a sshfs-mounted working directory
in my development machine to make sure that I neve lose any work in progress
when I reset the machine.


The assumption is that the production machine is dedicated for Kata.
When setting up e. g. the postgres database or the firewall we assume
that nobody else uses them. During uninstallation we assume that we
don't have to preserve anything else but data generated by
Kata. (Uninstallation and upgrade are not yet supported at the time
of writing)

Generally this internal development document is written as an addition to the
../INSTALL document for the end customer. If the same commands or explanations
are needed in both places, we refer to ../INSTALL from here.  This helps to
avoid duplicate work and partially out-of-date and contradicting information.

II.   Build & installation preparations

These steps are only needed on the development machine.

Building has been tested in a plain minimal CentOS 6.3
installation. For my own administration I had already installed

- openssh-client
- make & git (they are needed by etckeeper, which I install from source)

Not sure whether any of those is really needed.

Setting up the build environment has been automated in ./setup-buildenv.sh

It will install 2 packages ...

- rpm-build
- redhat-rpm-config

(not sure whether the latter one is needed)

... and set up your rpmbuild environment under ~/rpmbuild
like suggested in http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment


We need to use the EPEL repository and the Shibboleth repository also
on the development machine. See ../INSTALL how to enable these 2 repos.

General remarks: Never build anything as root. Of course for installing
(rpm -i and yum install) root is required, usage of sudo is a good practice
to avoid being root for "too long".

Two of our packages get automatically increasing version numbers based on build
time. So the version numbers mentioned in this document will be smaller on
than those you see in real life.


III.  Building and installation of solr

SOLR is a key dependent component for CKAN, thus we need it built and packaged
manually as it is not packaged in any separate repository.

This source repository of Nomovok contains a basic .spec file which has the
necessary information regarding the format of the source tarball which is
essential to the installation. The spec file resides in rpms/solr.

Building it is straightforward, assuming one has a development machine 1 primed
for building RPM packages from source. We just need to download a binary
distribution of SOLR to ~/rpmbuild/SOURCES:
 http://www.poolsaboveground.com/apache/lucene/solr/4.3.0/solr-4.3.0.tgz

$ curl -O http://www.poolsaboveground.com/apache/lucene/solr/4.3.0/solr-4.3.0.tgz
$ mv solr-4.3.0.tgz ~/rpmbuild/SOURCES/

And then issuing the rpmbuild command (never build as root)

$ rpmbuild -ba solr.spec

The result will be in ~/rpmbuild/RPMS/x86_64

The installation is done using command (yes, we need this package on the
development machine already)

$ sudo yum install ~/rpmbuild/RPMS/x86_64/solr-4.3.0-1.el6.x86_64.rpm


IV.  Building and installation of mcfg

This step is carried out on the development machine.

For building the kata-ckan-dev package, go to directory rpms/mcfg
and call the script ./build-from-repo.sh

This package is not architecture dependent so the result will be in
~/rpmbuild/RPMS/noarch

install the package using

$ sudo yum install ~/rpmbuild/RPMS/noarch/mcfg-450005-1.el6.noarch.rpm


V.    Building and installation of kata-ckan-dev

This step is done in the development machine.

For building the kata-ckan-dev package, go to directory rpms/kata-ckan-dev
and call the script ./build-from-repo.sh

Before the kata-ckan-dev.rpm can be installed, the master configuration must
be edited (This is not yet functional at the time of writing so it can
be skipped.)

By default packages from github will be installed as their current default
version (tip of default branch). If other versions are desired see file
tools/internal/kata-ckan-dev-versions.

For locating and installing the package see the section about solr
above. This installation produces a lot of output. In case of errors it
is useful to the have the full output. So it might be a good idea to execute
the final installation under script(1).

$ script
$ sudo yum install ~/rpmbuild/RPMS/x86_64/kata-ckan-dev-450008-1.el6.x86_64.rpm
$ exit

The log file is called typescript, it might be a good idea to rename it
immediately if the file is need.

This installation will result in a fully functional kata installation on the
development machine.

Necessary user accounts will be created, ckan installed, apache configured,
and the firewall will be opened for web access.

Kata might be used for some testing, but it's main purpose is to be
packaged for production.


VI. Building kata-ckan-prod

This will happen still in the development machine.

Building happens by changing to directory rpms/kata-ckan-prod and calling
the script ./build-from-repo.sh

This step will package the current development installation and allow
multiple repeatable installations later.


VII. Installing kata-ckan-prod

This step is carried out in the production machine.

The complete instructions are found in file ../INSTALL


VIII.  Administrative tasks

(tasks previously documented here are no longer relevant, new ones TODO)
